#Сложение двух чисел:
# print(6 + 2)  # 8
#Вычитание двух чисел:
# print(6 - 2)  # 4
#Деление двух чисел:
# print(6 / 2)  # 3.0
#Целочисленное деление двух чисел:
# print(7 / 2)  # 3.5
# print(7 // 2)  # 3 Данная операция возвращает целочисленный результат деления, отбрасывая дробную часть
# Возведение в степень:
# print(6 ** 2)  # Возводим число 6 в степень 2. Результат - 36
#Получение остатка от деления:
# print(7 % 2)  # Получение остатка от деления числа 7 на 2. Результат -1
#
#
# Индексация
# binance = "negri pidorasi"
# binance[Указывается индекс символа необходимый для вывода(Индексация начинается с 0)]
# Пример:
#     binance = "12"
#     binance[0]
#     Out: 1
# Пример 2:
#     binance = "qwertyui"
#     binance[2:]
#     Out:'ertyui'
#      где 2 это начальная позиция с которой начинается отщет
#      а двоиточие озночает до конца
#      если двоиточие ставится с начала это от начала строки и 2 значение это ее конец
#      3 значение означает размер шага между символами.
# Пример 3:
#     binance = "1234567890"
#     binance[::2]
#     Out:'13579'
#
#
#
# Свойства и Методы Строк:
#
#    Конкатенация строк:
#      name = "Nikita"
#      last_name = name[::]
#      last_name + "Igolkin" + "9Г"
#      Out:'NikitaIgolkin9Г'
#       Что бы поставить пробел между добавленными значениямм можно паставить его перед самим словом в скобках
#        Пример 1:
#              name = "Nikita"
#              last_name = name[::]
#              last_name + " Igolkin" + " 9Г"
#              Out: 'Nikita Igolkin 9Г'
#        Пример 2:
#              x = "Russia"
#              x + " is beautiful country"
#              Out: Russia is beautiful country
#        Можно умножать строки
#         Пример:
#              x = "Russia"
#              x * 10
#              Out:'RussiaRussiaRussiaRussiaRussiaRussiaRussiaRussiaRussiaRussia'
#    Методы для строк:
#        x = 'russia'
#        x.upper()
#        Out:'RUSSIA'
#      Что бы изменить исходную строку нужно создать перемменую
#       Пример:
#            x = "russia"
#            x = x.upper()
#            print(x)
#            Out:RUSSIA
#     x.split() разделяет страку на отдельные части и созадет список
#       Пример:
#           x = "russia america france"
#           x = x.split()
#           print(x)
#           Out:['russia', 'america', 'france']
#         пробел разделитель по умолчанию что бы изменить разделитель x.split(вставить сюда значение)
#
#
#
#  Форматирование с помощью метода .format()
#        Синтаксис:
#              print("Это строка была {}".format("Добавлена"))
#                     фигурные скобки заминяются на то что добовляется(Фигурные скобки всегда ставятся вместе с текстом
#                     в одних кавычках)после ковычек идет .format() в скобках пишется добовляемое значение (Также пишет
#                     ся в ковычках)
#              Пример:
#                     print("это было здесь {}".format("А ЭТО БЫЛО ДОБАВЛЕНО"))
#                     Out:это было здесь А ЭТО БЫЛО ДОБАВЛЕНО
#              Так же можно вставлять несколько значений
#                     print("Это строка была {} {} {}".format("Добавлена","2","3"))
#                     Out:Это строка была Добавлена 2 3
#              Так же можно выбирать последовательность вставления значения
#                     print("Это строка была {0} {2} {1}".format("1","2","3"))
#                     Out:Это строка была 1 3 2
#              Обратить внимание индексация значений так же идет с 0
#              Так же можно приваивать названия значениям
#                     print("Это строка была {c} {b} {a}".format(a = "1", b = "2", c = "3"))
#                     Out:Это строка была 3 2 1
#  Форматирование float(Точность чисел с плавающей точкой)
#          Синтаксис:
#             {Value:width.precision f}
#             {Значение:Ширена.Точность}
#
#              number = 100/777
#              Out:0.1287001287001287
#
#              print("Результат {:1.3f}".format(number))
#              Out:Результат 0.129
#
# Форматированые строковые литералы:
#           Синтаксис:
#              name = "Dimasik"
#              print(f"Имя {name}")
#              Out:Имя Dimasik
#
# Списки:
#     Синтаксис: [Значения,И,ЗАПЯТЫЕ МЕЖДУ НИМИ]
#        Можно создавать списки чисел или списки разных типов данных
#            Пример:
#              a = [12,"negri",1.27]
#        Функция len(Название переменной) <-- Длина списка(Используется также для строк)
#        Списки можно индексировать а так же проводить конкатинацию
#           Пример 1:
#                my_list = ["one","two","three"]
#                my_list[::]
#                Out:['one', 'two', 'three']
#           Пример 2:
#                my_list = [1,2,3,4]
#                my_second_list = [5,6,7,8]
#                a = my_list + my_second_list
#                print(a)
#                Out:[1, 2, 3, 4, 5, 6, 7, 8]
#        Значения в списке в отличие от строк можно менять
#           Пример:
#                my_list = ["one","two","three"]
#                my_list[0] = "first"
#                Out:['first', 'two', 'three']
#        Метод .append добавляет элемент в конец списка
#           Пример:
#                my_list = ["one","two","three"]
#                my_list.append("four")
#                Out:['one', 'two', 'three', 'four']
#        Метод .pop удаляет элемент из конца списка и возвращает его
#           Пример:
#                my_list = ["one","two","three"]
#                my_list.pop()
#                Out:'three'
#               Теперь если снова написать список
#                my_list
#                Out:['one', 'two']
#               С конца списка было удалено полученное значение
#        .pop значение можно сохранить
#           Пример:
#                my_list = ["one","two","three"]
#                pop_list = my_list.pop()
#                print(pop_list)
#                Out:'three'
#       Так же можно удалять выбраное значение
#           для этого нужно в скобках поставить индекс удаляемого числа
#           Пример:
#                my_list = ["one","two","three"]
#                my_list.pop(0)
#                Out:'one'
#                print(my_list)
#                Out:['two', 'three']
#        Метод .sort сортирует по алфавиту и по порядку значения списка
#           Пример:
#                my_list = ['f','e','d','c','b','a']
#                my_list.sort()
#                Out:None потому что метод ничего не возвращает
#                print(my_list)
#                Out:['a', 'b', 'c', 'd', 'e', 'f']
#         Так же можно сделать для чисел
#          Пример:
#                my_list = ['6','5','4','3','2','1',]
#                my_list.sort()
#                Out:None
#                print(my_list)
#                Out:['1', '2', '3', '4', '5', '6']
#        Метод .reverse меняет порядок на противоположный
#          Пример:
#               my_list = ['1', '2', '3', '4', '5', '6']
#               my_list.reverse
#               Out:None потому что метод ничего не возвращает
#               print(my_list)
#               Out:['6','5','4','3','2','1',]
#
# Словари:
#       Синтаксис:
#            my_dick = {"Ключ":"Значение","key":"value"}
#        Пример:
#            my_slovar = {"lock1":"key1","lock2":"key2"}
#            my_slovar["lock1"] можно выбирать значения
#            Out:'key1'
#        Пример 2:
#            shop_price = {"Apple":3.20,"orange":2.10,"Applepen":4.60}
#            shop_price["Apple"]
#            Out:3.2
#        Словари гибкие для типов данных
#        Пример 3:
#            shop_price = {"k1":2.99,"k2":3,"k3":[1,2,3],"k4":{"key1":"key2"}}
#            shop_price["k1"]
#            Out:2,99
#            shop_price["k2"]
#            Out:3
#            shop_price["k3"]
#            Out:[1,2,3]
#            shop_price["k3"][0] 2 квадратные скобки означают глубину
#            Out:1
#            shop_price["k4"]
#            Out:{'key1': 'key2'}
#            shop_price["k4"]["key1"]
#            Out:'key2' 2 квадратные скобки означают глубину
#        Что бы добавить новую пару
#            a = {"key1":"j1","key2":"j2"}
#            a["key3"] = "j3"
#            print(a)
#            Out:{'key1': 'j1', 'key2': 'j2', 'key3': 'j3'}
#        Новое значение для ключа
#            a = {"key1":"j1","key2":"j2"}
#            a["key1"] = "new1"
#            print(a)
#            Out:{'key1': 'new1', 'key2': 'j2'}
#       Методы:
#           Получение всех ключей .keys()
#             Пример:
#                 a = {"key1":"j1","key2":"j2"}
#                 a.keys()
#                 Out:dict_keys(['key1', 'key2'])
#           Получение всех значений .values()
#                 a = {"key1":"j1","key2":"j2"}
#                 a.values()
#                 Out:dict_values(['j1', 'j2'])
#           Получение всех пар .items()
#                 a = {"key1":"j1","key2":"j2"}
#                 a.items()
#                 Out:dict_items([('key1', 'j1'), ('key2', 'j2')])
# Кортежи:
#      Кортежи как списки но их нельзя изменить
#   Методы:
#       .count подсчитвывает сколько раз встречается значение в кортеже
#      Пример:
#         a = (1,1,3)
#         a.count(1)
#         Out:2
#
#       .index определяет индекс значения
#      Пример:
#         a = (1,1,3)
#         a.index(1) если значений несколько то ставится первый индекс
#         Out:0
# Множества:
#       Содержать только уникальные значения
#    Конвертация списка в множества
#         a = [1,2,3,4,1,2,3,4,1,2,3,4]
#         set(a)
#         Out:{1, 2, 3, 4}
# Ввод-вывод (IO) для файлов в Python
#        метод .read() одной строкой выводит текст из файла
#        метод .readlines() каждая строка как отдельный элеммент в списке
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#






















